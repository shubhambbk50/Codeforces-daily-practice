B. Tanya and Candies
time limit per test1 second
memory limit per test256 megabytes
inputstandard input
outputstandard output
Tanya has n candies numbered from 1 to n. The i-th candy has the weight ai.

She plans to eat exactly n−1 candies and give the remaining candy to her dad. Tanya eats candies in order of increasing their numbers, exactly one candy per day.

Your task is to find the number of such candies i (let's call these candies good) that if dad gets the i-th candy then the sum of weights of candies Tanya eats in even days will be equal to the sum of weights of candies Tanya eats in odd days. Note that at first, she will give the candy, after it she will eat the remaining candies one by one.

For example, n=4 and weights are [1,4,3,3]. Consider all possible cases to give a candy to dad:

Tanya gives the 1-st candy to dad (a1=1), the remaining candies are [4,3,3]. She will eat a2=4 in the first day, a3=3 in the second day, a4=3 in the third day. So in odd days she will eat 4+3=7 and in even days she will eat 3. Since 7≠3 this case shouldn't be counted to the answer (this candy isn't good).
Tanya gives the 2-nd candy to dad (a2=4), the remaining candies are [1,3,3]. She will eat a1=1 in the first day, a3=3 in the second day, a4=3 in the third day. So in odd days she will eat 1+3=4 and in even days she will eat 3. Since 4≠3 this case shouldn't be counted to the answer (this candy isn't good).
Tanya gives the 3-rd candy to dad (a3=3), the remaining candies are [1,4,3]. She will eat a1=1 in the first day, a2=4 in the second day, a4=3 in the third day. So in odd days she will eat 1+3=4 and in even days she will eat 4. Since 4=4 this case should be counted to the answer (this candy is good).
Tanya gives the 4-th candy to dad (a4=3), the remaining candies are [1,4,3]. She will eat a1=1 in the first day, a2=4 in the second day, a3=3 in the third day. So in odd days she will eat 1+3=4 and in even days she will eat 4. Since 4=4 this case should be counted to the answer (this candy is good).
In total there 2 cases which should counted (these candies are good), so the answer is 2.

Input
The first line of the input contains one integer n (1≤n≤2⋅105) — the number of candies.

The second line of the input contains n integers a1,a2,…,an (1≤ai≤104), where ai is the weight of the i-th candy.

Output
Print one integer — the number of such candies i (good candies) that if dad gets the i-th candy then the sum of weights of candies Tanya eats in even days will be equal to the sum of weights of candies Tanya eats in odd days.

Examples
inputCopy
7
5 5 4 5 5 5 6
outputCopy
2
inputCopy
8
4 8 8 7 8 4 4 5
outputCopy
2
inputCopy
9
2 3 4 2 2 3 2 2 4
outputCopy
3
Note
In the first example indices of good candies are [1,2].

In the second example indices of good candies are [2,3].

In the third example indices of good candies are [4,5,9].

CODE-:


/***

            Bismillahir Rahmanir Rahim
            Read in the name of Allah, who created you!!!
            Author : Shah Newaj Rabbi Shishir,
            Department of CSE, City University, Bangladesh.

***/

#include <bits/stdc++.h>
using namespace std;

#define ebar_khela_hoppe    int main (void)
#define bair_ho             return 0
#define sf                  scanf
#define pf                  printf
#define ssf                 sscanf
#define spf                 sprintf
#define fsf                 fscanf
#define fpf                 fprintf
#define fast                ios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0)
#define scase               sf ("%d",&tc)
#define sn                  sf ("%d",&n)
#define whilecase           while (tc--)
#define eof                 while (cin >> n)
#define forloop             for (pos=1; pos<=tc; pos++)
#define arrayloop           for (i=0; i<n; i++)
#define cinstr              cin >> str
#define getstr              getline (cin,str)
#define pcase               pf ("Case %d: ",pos)
#define vi                  vector <int>
#define si                  set <int>
#define vs                  vector <string>
#define pii                 pair <int,int>
#define mii                 map <int,int>
#define pb                  push_back
#define in                  insert
#define llu                 unsigned long long
#define lld                 long long
#define U                   unsigned int
#define endl                "\n"

const lld m = 1073741824;
const int MAX = 200005;
const double pi = acos(-1.0);

int SetBit (int n, int x) { return n | (1 << x); }
int ClearBit (int n, int x) { return n & ~(1 << x); }
int ToggleBit (int n, int x) { return n ^ (1 << x); }
bool CheckBit (int n, int x) { return (bool)(n & (1 << x)); }

int arr[MAX],even[MAX],odd[MAX];

ebar_khela_hoppe
{
    /*
    	freopen ("input.txt","r",stdin);
    	freopen ("output.txt","w",stdout);
    */

    int n,i,ans,ODD,EVEN;

    while (sf ("%d",&n) != EOF)
    {
        for (i=1; i<=n; i++)
        {
            sf ("%d",&arr[i]);

            if (i & 1)
            {
                odd[i] = odd[i-1]+arr[i];
                even[i] = even[i-1];
            }
            else
            {
                even[i] = even[i-1]+arr[i];
                odd[i] = odd[i-1];
            }
        }

        ans = 0;

        for (i=1; i<=n; i++)
        {
            if (i & 1)
            {
                ODD = even[n]-even[i]+odd[i]-arr[i];
                EVEN = odd[n]-odd[i]+even[i];
            }
            else
            {
                ODD = even[n]-even[i]+odd[i];
                EVEN = odd[n]-odd[i]+even[i]-arr[i];
            }

            if (ODD == EVEN)
                ++ans;
        }

        pf ("%d\n",ans);

        memset (even,0,sizeof even);
        memset (odd,0,sizeof odd);
    }

    bair_ho;
}
